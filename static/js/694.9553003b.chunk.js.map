{"version":3,"file":"static/js/694.9553003b.chunk.js","mappings":"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","sources":["components/hoc/WithAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://samurai-way/./src/components/profile/profileInfo/ProfileInfo.module.css?df08","components/profile/ProfileStatusWithHooks.tsx","components/profile/profileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/profile/myPosts/MyPosts.module.css?000b","webpack://samurai-way/./src/components/profile/myPosts/posts/Post.module.css?7dc4","components/profile/myPosts/posts/Post.tsx","components/profile/myPosts/MyPosts.tsx","components/profile/myPosts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx"],"sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component  {...restProps as T}/>;\r\n    }\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"ProfileInfo_avatar__PQsaD\",\"profileBackground\":\"ProfileInfo_profileBackground__OPqNU\"};","import React, {useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusProps = {\r\n    status: string;\r\n    updateStatus: (status: string) => void;\r\n};\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusProps> = ({status, updateStatus}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [currentStatus, setCurrentStatus] = useState(status);\r\n\r\n\r\n    useEffect(() => {\r\n        setCurrentStatus(status);\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateStatus(currentStatus);\r\n    };\r\n\r\n    const onStatusChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentStatus(event.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {!editMode && (\r\n                <span onDoubleClick={activateEditMode}>\r\n                    {currentStatus || 'No status'}\r\n                </span>\r\n            )}\r\n\r\n            {editMode && (\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    onBlur={deactivateEditMode}\r\n                    value={currentStatus}\r\n                    placeholder={'Hello my friends'}\r\n                    autoFocus\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { Preloader } from \"../../common/preloader/Preloader\";\r\nimport { ContactsType, ProfileType } from \"../Profile\";\r\nimport classes from './ProfileInfo.module.css';\r\nimport { ProfileStatusWithHooks } from \"../ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoProps = {\r\n    profile: ProfileType | null;\r\n    status: string;\r\n    updateStatus: (status: string) => void;\r\n};\r\n\r\nconst Contacts = ({ contacts }: { contacts: ContactsType }) => (\r\n    <div>\r\n        <h3>Мои контакты!</h3>\r\n        {Object.entries(contacts).map(([key, value]) => (\r\n            value ? <div key={key}>{key}: {value}</div> : null\r\n        ))}\r\n    </div>\r\n);\r\n\r\nexport const ProfileInfo = (props: ProfileInfoProps) => {\r\n    if (!props.profile) {\r\n        return <Preloader />;\r\n    }\r\n\r\n    const { profile, status, updateStatus } = props;\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.avatar}>\r\n                <img\r\n                    src=\"https://avatars.dzeninfra.ru/get-zen_doc/271828/pub_655658c72ac2da7753ee753c_6556596de3bfcb307785efa6/scale_1200\"\r\n                    alt=\"Profile background\"\r\n                />\r\n                <h4>status: <ProfileStatusWithHooks\r\n                    status={status}\r\n                    updateStatus={updateStatus} />\r\n                </h4>\r\n            </div>\r\n\r\n            <div>\r\n                <img src={profile.photos.small}\r\n                     alt=\"Profile avatar\"\r\n                     className={classes.profileBackground}\r\n                />\r\n                <div>\r\n                    <h2>Обо мне: {profile.aboutMe}</h2>\r\n                    <Contacts contacts={profile.contacts} />\r\n                    <h2>Моё имя: {profile.fullName}</h2>\r\n                    <h2>Место работы: {profile.lookingForAJob ? 'Ищу работу' : 'Не ищу работу'}</h2>\r\n                    <h2>Вакансии: {profile.lookingForAJobDescription}</h2>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__IOjMi\",\"posts\":\"MyPosts_posts__DwIj5\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__PK8iI\"};","import React from 'react';\r\nimport classes from \"./Post.module.css\"\r\n\r\ntype PostProps = {\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport const Post = (props: PostProps) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://sneg.top/uploads/posts/2023-06/1687597602_sneg-top-p-ava-obshchenie-instagram-1.jpg\"\r\n                alt=\"\"/>\r\n            <span>{props.message}</span>\r\n            <div>\r\n                <span>Likes {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport classes from \"./MyPosts.module.css\"\r\nimport {Post} from \"./posts/Post\";\r\nimport {MyPostType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/formsControls/FormsControls\";\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostType) => {\r\n\r\n    let postDataElement = [...props.posts].reverse().map((p) => {\r\n        return (\r\n            <Post key={p.id} message={p.message} likesCount={p.likesCount}/>\r\n        )\r\n    })\r\n\r\n\r\n    const onAddPost = (values: OnnAddPostValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My Posts</h3>\r\n\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n\r\n            <div className={classes.posts}>\r\n\r\n                {postDataElement}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n// Интерфейс для значений формы\r\ninterface OnnAddPostValuesType {\r\n    newPostText: string;\r\n}\r\n\r\ntype AddNewPostFormProps = InjectedFormProps<OnnAddPostValuesType>;\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm = (props: AddNewPostFormProps) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <div>\r\n                <Field name={'newPostText'}\r\n                       component={Textarea}\r\n                       placeholder={'Enter a message...'}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm<OnnAddPostValuesType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\n","import {addPost} from \"../../redux/reducer/profilePageReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {PostDataType} from \"../../redux/store\";\r\nimport {MyPosts} from \"./MyPosts\";\r\n\r\nexport type MapStatePropsType = {\r\n    posts: PostDataType[]\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostType = MapStatePropsType & MapDispatchToPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost\r\n})(MyPosts)\r\n\r\n\r\n","import React from \"react\";\r\nimport { ProfileInfo } from \"./profileInfo/ProfileInfo\";\r\nimport { MyPostsContainer } from \"./myPosts/MyPostsContainer\";\r\n\r\nexport type ContactsType = {\r\n    facebook: string;\r\n    github: string;\r\n    instagram: string;\r\n    mainLink: string;\r\n    twitter: string;\r\n    vk: string;\r\n    website: null;\r\n    youtube: null;\r\n};\r\n\r\nexport type PhotosType = {\r\n    large: string;\r\n    small: string;\r\n};\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string;\r\n    contacts: ContactsType;\r\n    fullName: string;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription: string;\r\n    photos: PhotosType;\r\n};\r\n\r\ntype ProfileProps = {\r\n    profile: ProfileType;\r\n    status: string;\r\n    updateStatus: (status: string) => void;\r\n};\r\n\r\nexport const Profile = (props: ProfileProps) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, profileThunkCreator, setUserProfile, updateStatus} from \"../redux/reducer/profilePageReducer\";\r\nimport {ProfilePageType, UsersDataType} from \"../redux/store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\n\r\n\r\nexport type MapStateToProps = {\r\n    profile: ProfilePageType[\"profile\"] | UsersDataType | null;\r\n    status: string\r\n    authorizedUserId: null\r\n    isAuth: boolean\r\n}\r\nexport type MapDispatchToProps = {\r\n    updateNewPostText: (text: string) => void\r\n    addPost: (newPostText: string) => void\r\n    setUserProfile: (profile: null) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\nexport type DialogsUsersPropsType = MapStateToProps & MapDispatchToProps;\r\n\r\nclass ProfileContainer extends React.Component<any, DialogsUsersPropsType> {\r\n\r\n    componentDidMount() {\r\n\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.profileThunkCreator(userId)\r\n\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToProps => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfile, profileThunkCreator, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","to","ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","currentStatus","setCurrentStatus","useEffect","onDoubleClick","onChange","event","currentTarget","value","onBlur","placeholder","autoFocus","Contacts","contacts","entries","map","ProfileInfo","profile","Preloader","className","classes","src","alt","photos","small","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","Post","message","likesCount","MyPosts","React","postDataElement","posts","reverse","p","id","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","validate","required","MyPostsContainer","profilePage","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","profileThunkCreator","getStatus","compose","setUserProfile","withRouter"],"sourceRoot":""}