{"version":3,"file":"static/js/659.a11261c3.chunk.js","mappings":"mLACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAAwI,wBAAxI,EAA2K,0BAA3K,EAA+M,yBAA/M,EAAiP,wB,mBCSpOA,EAAa,SAACC,GACvB,OACI,4BACI,gBAAKC,UAAWC,EAAiB,IAAMA,EAAvC,UACI,SAAC,KAAD,CAASC,GAAI,aAAeH,EAAMI,GAAlC,SACKJ,EAAMK,UAGf,gBAAKJ,UAAWC,EAAhB,UACI,gBAAKI,IAAKN,EAAMO,IAAKC,IAAI,WCb5BC,EAAU,SAACT,GACpB,OACI,gBAAKC,UAAWC,EAAhB,SAAkCF,EAAMU,W,uCC8C1CC,GAAcC,EAAAA,EAAAA,GAAiB,IAqB/BC,GAAsBC,EAAAA,EAAAA,GAAoC,CAACC,KAAM,kBAA3CD,EAnBL,SAACd,GACpB,OACI,kBAAMgB,SAAUhB,EAAMiB,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXf,KAAM,iBACNgB,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAAUZ,QAIhC,0BACI,oD,oBCpChB,GAAea,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfoB,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACC,GACxB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAA+BD,SAQhDE,EAAAA,EAFJ,EDtBuB,SAAChC,GAEpB,IAAI0B,EAAQ1B,EAAM2B,YAEdM,EAAiBP,EAAMQ,QAAQC,KAAI,SAACC,GACpC,OACI,SAACrC,EAAD,CAAuBM,KAAM+B,EAAE/B,KAAMD,GAAIgC,EAAEhC,GAAIG,IAAK6B,EAAE7B,KAArC6B,EAAEhC,OAIvBiC,EAAiBX,EAAMY,SAASH,KAAI,SAACI,GACrC,OACI,SAAC9B,EAAD,CAAoBC,QAAS6B,EAAE7B,SAAjB6B,EAAEnC,OASxB,OACI,iBAAKH,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK+B,KAEL,gBAAKhC,UAAWC,EAAhB,SACKmC,KAGL,SAACxB,EAAD,CAAqBG,SAdP,SAACwB,GACnBxC,EAAM6B,YAAYW,EAAOV,0B,kIEjB7BW,EAA6B,SAACf,GAAD,MAAiD,CAC9EgB,OAAQhB,EAAMiB,KAAKD,SAGhB,SAASV,EAAoBY,GAMhC,OAAOnB,EAAAA,EAAAA,IAAQgB,EAARhB,EALP,SAA2BzB,GACvB,IAAK0C,EAAwB1C,EAAxB0C,OAAWG,ECfT,SAAkCC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,GAAS,EAAAC,EAAA,GAA6BL,EAAQC,GAGlD,GAAIK,OAAOC,sBAAuB,CAChC,IAAIC,EAAmBF,OAAOC,sBAAsBP,GAEpD,IAAKG,EAAI,EAAGA,EAAIK,EAAiBC,OAAQN,IACvCD,EAAMM,EAAiBL,GACnBF,EAASS,QAAQR,IAAQ,GACxBI,OAAOK,UAAUC,qBAAqBC,KAAKb,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,EDDD,CAA6BlD,EAA7B,GACA,OAAK0C,GACE,SAACE,GAAD,UAAgBC,KADH,SAAC,KAAD,CAAU1C,GAAI","sources":["webpack://samurai-way/./src/components/dialogs/Dialogs.module.css?04a9","components/dialogs/dialogItem/DialogItem.tsx","components/dialogs/message/Message.tsx","components/dialogs/Dialogs.tsx","components/dialogs/DialogsContainer.tsx","components/hoc/WithAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__dz0Mj\",\"dialogItems\":\"Dialogs_dialogItems__PGXSa\",\"dialog\":\"Dialogs_dialog__ECAgz\",\"active\":\"Dialogs_active__S1Qf6\",\"messages\":\"Dialogs_messages__zdiO5\",\"message\":\"Dialogs_message__Al8tY\",\"avatar\":\"Dialogs_avatar__MG6nq\"};","import classes from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n\r\ntype DialogPropsItem = {\r\n    img: string\r\n    id: number\r\n    name: string\r\n}\r\nexport const DialogItem = (props: DialogPropsItem) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.dialog + ' ' + classes.active}>\r\n                <NavLink to={'/dialogs/1' + props.id}>\r\n                    {props.name}</NavLink>\r\n            </div>\r\n\r\n            <div className={classes.avatar}>\r\n                <img src={props.img} alt=\"\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import classes from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MessageProps = {\r\n    message: string\r\n}\r\nexport const Message = (props: MessageProps) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport {DialogItem} from \"./dialogItem/DialogItem\";\r\nimport {Message} from \"./message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../utils/validators/validators\";\r\nimport {Textarea} from \"../common/formsControls/FormsControls\";\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElement = state.dialogs.map((d) => {\r\n        return (\r\n            <DialogItem key={d.id} name={d.name} id={d.id} img={d.img}/>\r\n        )\r\n    });\r\n\r\n    let messageElement = state.messages.map((m) => {\r\n        return (\r\n            <Message key={m.id} message={m.message}/>\r\n        )\r\n    });\r\n\r\n    const addNewMessage = (values: AddMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageText)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messageElement}\r\n            </div>\r\n\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// Интерфейс для значений формы\r\ninterface AddMessageFormValuesType {\r\n    newMessageText: string;\r\n}\r\n\r\n// Типизация пропсов для AddMessageForm\r\ntype AddMessageFormPropsType = InjectedFormProps<AddMessageFormValuesType>;\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props: AddMessageFormPropsType) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newMessageText'}\r\n                       placeholder={'Enter a message...'}\r\n                       validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <button>Add Message</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormValuesType>({form: 'addMessageForm'})(AddMessageForm);","import {AppRootStateType} from \"../redux/redux-store\";\r\nimport {addNewMessageTextActionCreator} from \"../redux/reducer/dialogsPageReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {DialogsPageType} from \"../redux/store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../hoc/WithAuthRedirect\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageText: string) => {\r\n            dispatch(addNewMessageTextActionCreator(newMessageText));\r\n        },\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component  {...restProps as T}/>;\r\n    }\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["DialogItem","props","className","classes","to","id","name","src","img","alt","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","compose","connect","state","dialogsPage","dispatch","sendMessage","newMessageText","addNewMessageTextActionCreator","withAuthRedirect","dialogsElement","dialogs","map","d","messageElement","messages","m","values","mapStateToPropsForRedirect","isAuth","auth","Component","restProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}